require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'

pre_install do |installer|
  # Fix Hermes deployment issue
  installer.pod_targets.each do |pod|
    if pod.name.eql?('hermes-engine')
      def pod.build_type
        Pod::BuildType.static_library
      end
    end
  end
end

install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'NixtheNic' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    # Yoga fix for incompatible function pointer types
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        if target.name == 'Yoga'
          config.build_settings['OTHER_CFLAGS'] = "$(inherited) -Wno-error=incompatible-function-pointer-types -Wno-incompatible-function-pointer-types"
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        end
        
        # Hermes fixes
        if target.name.start_with?("hermes-engine")
          # Force static builds for Hermes
          config.build_settings['SUPPORTED_PLATFORMS'] = 'iphoneos iphonesimulator'
          config.build_settings['SWIFT_VERSION'] = '5.0'
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
          config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
          # Disable bitcode
          config.build_settings['ENABLE_BITCODE'] = 'NO'
        end
        
        # Additional general settings that help with builds
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      end
    end
  end
end
